const std = @import("std");
const murmur3 = @import("murmur3.zig");
const syscall_defs = @import("syscall_defs.zig");

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    var args = try std.process.argsWithAllocator(allocator);
    defer args.deinit();

    _ = args.next(); // Skip program name

    const output_path = args.next() orelse {
        std.debug.print("Usage: gen_syscalls <output_path>\n", .{});
        return error.MissingArgument;
    };

    // Build output in memory first
    var output = std.ArrayList(u8){};
    defer output.deinit(allocator);

    const writer = output.writer(allocator);

    // Write header
    try writer.writeAll(
        \\//! Solana syscalls - Auto-generated by tools/gen_syscalls.zig
        \\//! DO NOT EDIT MANUALLY
        \\//!
        \\//! Syscalls are invoked via function pointers from magic constants.
        \\//! These constants are MurmurHash3-32 hashes of the syscall names.
        \\//! The Solana VM resolves these at runtime via `call -0x1` instruction.
        \\//!
        \\//! Based on: https://github.com/anza-xyz/solana-sdk/blob/master/define-syscall/src/definitions.rs
        \\
        \\
    );

    // Generate each syscall
    for (syscall_defs.syscalls) |def| {
        const hash = murmur3.syscallHash(def.name);

        // Write doc comment
        try writer.print("/// {s}\n", .{def.name});
        try writer.print("/// Hash: 0x{x:0>8}\n", .{hash});

        // Build parameter list for docs
        if (def.params.len > 0) {
            try writer.writeAll("/// Parameters:\n");
            for (def.params) |param| {
                try writer.print("///   - {s}: {s}\n", .{ param.name, param.type });
            }
        }

        if (def.return_type) |ret| {
            try writer.print("/// Returns: {s}\n", .{ret});
        }

        try writer.print(
            \\pub const {s} = @as(*align(1) const {s}, @ptrFromInt(0x{x:0>8}));
            \\
            \\
        , .{ def.name, def.signature, hash });
    }

    // Write helper section
    try writer.writeAll(
        \\
        \\// Convenience helpers
        \\
        \\/// Log a message (wrapper around sol_log_)
        \\pub fn log(message: []const u8) void {
        \\    sol_log_(message.ptr, message.len);
        \\}
        \\
        \\/// Log a single u64 value
        \\pub fn log_u64(value: u64) void {
        \\    sol_log_64_(value, 0, 0, 0, 0);
        \\}
        \\
        \\/// Log current compute units consumed
        \\pub fn logComputeUnits() void {
        \\    sol_log_compute_units_();
        \\}
        \\
        \\/// Get remaining compute units
        \\pub fn getRemainingComputeUnits() u64 {
        \\    return sol_remaining_compute_units();
        \\}
        \\
    );

    // Write to file
    const file = try std.fs.cwd().createFile(output_path, .{});
    defer file.close();
    try file.writeAll(output.items);

    std.debug.print("Generated syscalls.zig with {} syscalls\n", .{syscall_defs.syscalls.len});
}
